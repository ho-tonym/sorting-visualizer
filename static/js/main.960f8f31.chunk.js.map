{"version":3,"sources":["components/SortVisualizer/utils/index.js","MyProvider.js","components/SortVisualizer/algorithms/heapSort/index.js","components/SortVisualizer/slider/index.js","components/SortVisualizer/algorithms/bubbleSort/index.js","components/SortVisualizer/algorithms/selectionSort/index.js","components/SortVisualizer/algorithms/insertionSort/index.js","components/SortVisualizer/algorithms/mergeSort/index.js","components/SortVisualizer/algorithms/animation/executeAnim.js","components/SortVisualizer/SortVisualizer.jsx","components/SortVisualizer/index.js","components/SortVisualizer/hooks/useInterval.js","App.js","serviceWorker.js","index.js"],"names":["resetArray","count","min","max","array","i","push","Math","floor","random","swap","j","k","tempElement","MyContext","createContext","MyProvider","props","useState","animationArray","isSorted","isRunning","comparedValues","state","setState","sliderValues","slider","setSlider","Provider","value","children","useStateValue","useContext","length","SliderContainer","className","defaultValue","onChange","getBubbleSortAnim","arr","stop","heapify","left","right","getHeapSortAnim","a","getSelectSortAnim","getInsertSortAnim","element","tempArray","startMergeSort","mergeSortHelper","leftStart","rightEnd","middle","leftEnd","size","index","arrayCopy","doMerge","fromArr","fromPos","toArr","toPos","executeAnim","pArray","prevState","slice","bool","SortVisualizer","width","handleResetArray","useEffect","callback","delay","savedCB","useRef","current","intervalId","setInterval","clearInterval","useInterval","map","id","key","style","backgroundColor","height","ButtonToolbar","ButtonGroup","DropdownButton","as","title","Dropdown","Item","onClick","Button","variant","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.960f8f31.chunk.js","sourcesContent":["export function resetArray(count) {\n  const array = []\n  for (let i = 0; i < count; i++) {\n    array.push(randomInt(5, 400))\n  }\n  return array\n}\n\nexport const swap = (array, j, k) => {\n  const tempElement = array[j];\n\n  array[j] = array[k];\n  array[k] = tempElement;\n  return array\n}\n\nexport function randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport function arraysEqual(array1, array2) {\n  if (array1.length !== array2.length) return false;\n  for (let i = 0; i < array1.length; i++) {\n    if (array1[i] !== array2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n","import React, { useState, useContext, createContext } from 'react';\n\nexport const MyContext = createContext();\nexport const MyProvider = (props) => {\n  const [state, setState] = useState({\n    array: [],\n    animationArray: [],\n    isSorted: false,\n    isRunning: false,\n    comparedValues: [],\n  })\n\n  const [slider, setSlider] = useState({\n    sliderValues: 44,\n  })\n\n  return (\n    <MyContext.Provider\n      value={{\n        state,\n        setState,\n        slider,\n        setSlider\n      }}\n    >\n      {props.children}\n    </MyContext.Provider>\n  )\n}\n\nexport const useStateValue = () => useContext(MyContext)\n","import { swap } from '../../utils'\n\nlet length;\nlet animationArray;\n\nfunction heapify(array, i) {\n  const left = 2 * i + 1;\n  const right = 2 * i + 2;\n  let max = i;\n\n  if (left < length && array[left] > array[max]) {\n    max = left;\n  }\n\n  if (right < length && array[right] > array[max]) {\n    max = right;\n  }\n\n  if (max !== i) {\n    swap(array, i, max);\n    animationArray.push([\n      i, max, true,\n    ])\n    heapify(array, max);\n  }\n}\n\nexport const getHeapSortAnim = (array) => {\n  const arr = [...array]\n  let a;\n  length = arr.length;\n  animationArray = []\n  // build max heap\n  for (let i = Math.floor(length / 2); i >= 0; i -= 1) {\n    heapify(arr, i);\n  }\n\n  for (a = arr.length - 1; a > 0; a--) {\n    swap(arr, 0, a);\n    animationArray.push([0, a, true])\n    length--;\n\n    heapify(arr, 0);\n  }\n\n  return animationArray\n}\n","import React from 'react';\nimport Slider from 'rc-slider/lib/Slider';\nimport 'rc-slider/assets/index.css';\nimport { useStateValue } from '../../../MyProvider'\n\nexport const SliderContainer = () => {\n  const { slider, setSlider } = useStateValue()\n\n  function handleSliderChange(sliderValues) {\n    setSlider({ sliderValues });\n  }\n  const { sliderValues } = slider\n\n  return(\n    <div className=\"slider\">\n      <p>\n        Array Size  +  Speed\n      </p>\n      <Slider\n        defaultValue={sliderValues}\n        onChange={handleSliderChange}\n        min={10}\n        max={100}\n      />\n    </div>\n  )\n}\n","import { swap } from '../../utils'\n\nexport const getBubbleSortAnim = (array) => {\n  const arr = [...array]\n  const animationArray = []\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0, stop = arr.length - i; j < stop; j++) {\n      if (arr[j] > arr[j + 1]) {\n        swap(arr, j, j + 1);\n        animationArray.push([\n          j, j + 1, true,\n        ])\n      } else if(j + 1 === arr.length - i) {\n        // remove last one\n      } else {\n        animationArray.push([\n          j, j + 1, false,\n        ])\n      }\n    }\n  }\n  return animationArray\n}\n","import { swap } from '../../utils'\n\nexport const getSelectSortAnim = (array) => {\n  const arr = [...array]\n  const length = arr.length;\n  const animationArray = []\n  for (let i = 0; i < length; i++) {\n    let min = i;\n    for (let j = i + 1; j < length; j++) {\n      if (arr[min] > arr[j]) {\n        min = j;\n        animationArray.push([ // new low\n          j - 1, j, false,\n        ])\n      } else {\n        animationArray.push([ // move along\n          min, j, false,\n        ])\n      }\n    }\n    if (min !== i) {\n      swap(arr, i, min)\n      animationArray.push([ // swap at end\n        min, i, true,\n      ])\n    }\n  }\n  return animationArray\n}\n","export const getInsertSortAnim = (array) => {\n  const arr = [...array]\n  const length = arr.length;\n  const animationArray = []\n\n  for (let i = 0; i < length; i++) {\n    const element = arr[i];\n    let j;\n\n    for (j = i - 1; j >= 0 && arr[j] > element; j--) {\n      arr[j + 1] = arr[j];\n      animationArray.push([\n        j + 1, j, true,\n      ])\n    }\n    arr[j + 1] = element;\n  }\n\n  return animationArray\n};\n","let tempArray = []\nlet animationArray = []\n\nexport function startMergeSort(arr) {\n  const length = arr.length\n  if (length <= 1) return arr;\n  let tempArray = [...arr]\n  let array = [...arr]\n  animationArray = []\n\n  mergeSortHelper(array, 0, length - 1)\n  return animationArray\n}\n\nfunction mergeSortHelper(array, leftStart, rightEnd) {\n  if (leftStart === rightEnd) return\n  const middle = Math.floor((leftStart + rightEnd) / 2);\n\n  mergeSortHelper(array, leftStart, middle)\n  mergeSortHelper(array, middle + 1, rightEnd)\n  doMerge(array, leftStart, rightEnd)\n}\n\nfunction doMerge(array, leftStart, rightEnd) {\n  const leftEnd = Math.floor((rightEnd + leftStart) / 2);\n  const rightStart = leftEnd + 1\n  const size = rightEnd - leftStart + 1\n\n  let left = leftStart\n  let right = rightStart\n  let index = leftStart\n\n  while(left <= leftEnd && right <= rightEnd) {\n    if (array[left] <= array[right]) {\n      tempArray[index] = array[left]\n      left++\n    } else {\n      tempArray[index] = array[right]\n      right++\n    }\n    index++\n  }\n\n  arrayCopy(array, left, tempArray, index, leftEnd - left + 1)\n  arrayCopy(array, right, tempArray, index, rightEnd - right + 1)\n  arrayCopy(tempArray, leftStart, array, leftStart, size)\n}\n\nfunction arrayCopy(fromArr, fromPos, toArr, toPos, length) {\n  for (let i = 0; i < length; i++) {\n    toArr[toPos] = fromArr[fromPos]\n    animationArray.push([fromPos, toArr[toPos]])\n    toPos++\n    fromPos++\n  }\n}\n","import { swap } from '../../utils'\n\nexport const executeAnim = (setState, pArray, array) => {\n  if(pArray[0].length === 2) {\n    const arr = [...array]\n    const fromPos = pArray[0][0]\n    const value = pArray[0][1]\n\n    arr[fromPos] = value\n\n    setState(prevState => ({ ...prevState,\n      array: arr,\n      animationArray: prevState.animationArray.slice(1),\n      comparedValues: [fromPos, fromPos],\n    }))\n  } else {\n    const j = pArray[0][0]\n    const k = pArray[0][1]\n    const bool = pArray[0][2]\n\n    const tempArray = [...array]\n    const value = tempArray\n\n    if (bool) {\n      swap(tempArray, j, k)\n    }\n\n    setState(prevState => ({ ...prevState,\n      array: value,\n      animationArray: prevState.animationArray.slice(1),\n      comparedValues: [j, k, bool],\n    }))\n  }\n}\n","import React, { useEffect } from \"react\";\nimport \"./sort.min.css\";\nimport {\n  Button,\n  ButtonGroup,\n  Dropdown,\n  DropdownButton,\n  ButtonToolbar,\n} from \"react-bootstrap\";\nimport { resetArray } from \"./utils\";\nimport { useStateValue } from \"../../MyProvider\";\nimport useInterval from \"./hooks/useInterval\";\nimport { SliderContainer } from \"./slider\";\nimport {\n  startMergeSort,\n  getBubbleSortAnim,\n  getHeapSortAnim,\n  getSelectSortAnim,\n  getInsertSortAnim,\n  executeAnim,\n} from \"./algorithms\";\n\n\nfunction SortVisualizer() {\n  const { state, setState, slider } = useStateValue();\n  const { array, comparedValues, isRunning, isSorted, animationArray } = state;\n  const { sliderValues } = slider;\n  // const speed = 600 - Math.pow(array.length / 2, 2) > 0\n  //   ? 600 - Math.pow(array.length / 2, 2)\n  //   : 0;\n  const speed = 10\n  const width = Math.floor(1000 / (array.length * 2));\n  useEffect(() => {\n    handleResetArray(sliderValues)\n  }, [sliderValues])\n\n  // useEffect(() => {\n  //   console.log(state)\n  // })\n\n  useInterval(() => {\n    if (animationArray.length > 0) {\n      executeAnim(setState, animationArray, array)\n    } else {\n      setState(prevState => ({ ...prevState,\n        isRunning: false,\n        isSorted: true,\n        comparedValues: [],\n      }))\n    }\n  }, isRunning ? speed : null);\n\n  function handleResetArray(count) {\n    setState(prevState => ({\n      ...prevState,\n      array: resetArray(count),\n      isSorted: false,\n      isRunning: false,\n      comparedValues: [],\n    }))\n  }\n\n  function pauseResume() {\n    if (animationArray.length > 0) {\n      setState(prevState => ({ ...prevState,\n        isRunning: !prevState.isRunning,\n      }))\n    }\n  }\n\n  return (\n    <>\n      <div className=\"sort-visualizer\">\n        {array.length && array.map((value, id) => (\n          <div\n            key={id}\n            style={{\n              backgroundColor:\n              `${isSorted ? \"#ff6e8d\"\n                : id === comparedValues[0] && !comparedValues[2] ? \"#ff9f38\"\n                  : id === comparedValues[1] && !comparedValues[2] ? \"#ff9f38\"\n                    : id === comparedValues[0] || id === comparedValues[1]\n                      ? \"#4d84fe\" : \"#636363\"\n              }`,\n              height: `${value}px`,\n              width: `${width}px`\n            }}\n          />\n        ))}\n      </div>\n\n      <ButtonToolbar className=\"justify-content-between\">\n        <ButtonGroup>\n          <DropdownButton as={ButtonGroup} title=\"Pick a Sorting Algorithm\" id=\"bg-nested-dropdown\">\n            <Dropdown.Item\n              onClick={() => {\n                setState(prevState => ({ ...prevState, animationArray: startMergeSort(array), isRunning: true }))\n              }}\n            >\n              Merge Sort\n            </Dropdown.Item>\n            <Dropdown.Item\n              onClick={() => {\n                setState(prevState => ({ ...prevState, animationArray: getBubbleSortAnim(array), isRunning: true }))\n              }}\n            >\n              Bubble Sort\n            </Dropdown.Item>\n            <Dropdown.Item\n              onClick={() => {\n                setState(prevState => ({ ...prevState, animationArray: getSelectSortAnim(array), isRunning: true }))\n              }}\n            >\n              Select Sort\n            </Dropdown.Item>\n            <Dropdown.Item\n              onClick={() => {\n                setState(prevState => ({ ...prevState, animationArray: getInsertSortAnim(array), isRunning: true }))\n              }}\n            >\n              Insert Sort\n            </Dropdown.Item>\n            <Dropdown.Item\n              onClick={() => {\n                setState(prevState => ({ ...prevState, animationArray: getHeapSortAnim(array), isRunning: true }))\n              }}\n            >\n              Heap Sort\n            </Dropdown.Item>\n          </DropdownButton>\n          <Button variant=\"primary\"\n            onClick={() => handleResetArray(sliderValues)}\n          >\n            Reset\n          </Button>\n          <Button variant=\"primary\" onClick={() => pauseResume()}>\n            {animationArray.length <= 0\n              || animationArray.length > 0\n                && isRunning ? \"Pause\" : \"Resume\"}\n          </Button>\n        </ButtonGroup>\n        <ButtonGroup>\n          <SliderContainer />\n        </ButtonGroup>\n      </ButtonToolbar>\n    </>\n  )\n}\n\nexport default SortVisualizer\n","import SortVisualizer from './SortVisualizer'\n\nexport default SortVisualizer\n","import { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCB = useRef();\n\n  useEffect(() => {\n    savedCB.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function executeCallback() {\n      savedCB.current();\n    }\n    if (delay !== null) {\n      let intervalId = setInterval(executeCallback, delay);\n      return () => clearInterval(intervalId);\n    }\n  }, [delay]);\n}\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import logo from './logo.svg';\nimport SortVisualizer from './components/SortVisualizer'\nimport { MyProvider } from './MyProvider'\nimport './App.min.css'\n\n\nfunction App() {\n  return (\n    <MyProvider>\n      <div className=\"App\">\n        <SortVisualizer />\n      </div>\n    </MyProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}